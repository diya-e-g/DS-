#include <stdio.h>
#include <stdlib.h>

struct element
{
    int i;
    int j;
    int x;
};

struct Sparse
{
    int m;
    int n;
    int num;
    struct element *e;
};

void create(struct Sparse *s)
{
    int k;
    printf("Enter the number of rows: ");
    scanf("%d",&s->m);
    printf("Enter the number of columns: ");
    scanf("%d",&s->n);
    printf("Enter the number of values: ");
    scanf("%d",&s->num);
    s->e=(struct element *)malloc(s->num*sizeof(struct element));
    printf("Enter the row number,column number and value respectively: \n");
    
        for(k=0;k<s->num;k++)
        {
        scanf("%d %d %d", &s->e[k].i , &s->e[k].j , &s->e[k].x);
        }
    
}

void display(struct Sparse s)
{
    int i,j,k=0;
    printf("Sparse matrix: \n");
    for(i=0;i<s.m;i++)
    {
        for(j=0;j<s.n;j++)
        {
            if(i==s.e[k].i && j==s.e[k].j)
            {
                printf("%d ", s.e[k++].x);
            }
            else
            printf("0 ");
        }
        printf("\n");
    }
}

struct Sparse * add(struct Sparse *s1, struct Sparse *s2)
{
    int i,j,k;
    i=j=k=0;
    struct Sparse *sum;
    sum=(struct Sparse *)malloc(sizeof(struct Sparse));
    sum->e=(struct element *)malloc((s1->num+s2->num)*sizeof(struct element));
    sum->m=s1->m;
    sum->n=s1->n;
    while(i<s1->num && j<s2->num)
    {
        if(s1->e[i].i < s2->e[j].i)
        sum->e[k++]=s1->e[i++];
        else if(s1->e[i].i > s2->e[j].i)
        sum->e[k++]=s2->e[j++];
        else
        {
            if(s1->e[i].j < s2->e[j].j)
            sum->e[k++]=s1->e[i++];
            else if(s1->e[i].j > s2->e[j].j)
            sum->e[k++]=s2->e[j++];
            else
            {
                sum->e[k]=s1->e[i];
                sum->e[k++].x=s1->e[i++].x + s2->e[j++].x;
            }
        }
        
    }
    
        for(;i<s1->num;i++)
        sum->e[k++]=s1->e[i];
        
        for(;j<s2->num;j++)
        sum->e[k++]=s2->e[j];
    
    sum->num=k;
    return sum;
}

void main()
{
    struct Sparse s1,s2,*s;
    create(&s1);
    create(&s2);
    s=add(&s1,&s2);
    display(*s);
}
