#include <stdio.h>
#include <stdlib.h>

struct Node
{
    struct Node *lchild;
    int data;
    struct Node *rchild;
} *root = NULL;

void insert(int key)
{
    struct Node *t = root;
    struct Node *p, *r;
    if (root == NULL)
    {
        p = (struct Node *)malloc(sizeof(struct Node));
        p->data = key;
        p->lchild = p->rchild = NULL;
        root = p;
        return;
    }
    while (t != NULL)
    {
        r = t;
        if (key < t->data)
            t = t->lchild;
        else if (key > t->data)
            t = t->rchild;
        else
            return;
    }
    p = (struct Node *)malloc(sizeof(struct Node));
    p->data = key;
    p->lchild = p->rchild = NULL;
    if (key < r->data)
        r->lchild = p;
    else
        r->rchild = p;
}

void inorder(struct Node *p)
{
    if (p)
    {
        inorder(p->lchild);
        printf("%d ", p->data);
        inorder(p->rchild);
    }
}

struct Node *Search(int key)
{
    struct Node *t = root;
    while (t != NULL)
    {
        if (t->data == key)
            return t;
        else if (t->data < key)
            t = t->rchild;
        else
            t = t->lchild;
    }
    return NULL;
}

struct Node * Rinsert(struct Node *p,int key)
{
    struct Node *t=NULL;
    
    if(p==NULL)
    {
        t=(struct Node *)malloc(sizeof(struct Node));
        t->data=key;
        t->rchild=t->lchild=NULL;
        return t;
    }
 
        if(key<p->data)
        p->lchild=Rinsert(p->lchild,key);
        if(key>p->data)
        p->rchild=Rinsert(p->rchild,key);
    return p;
}

int Height(struct Node *p)
{
    int x,y;
    if(p==NULL)
    return 0;
    x=Height(p->lchild);
    y=Height(p->rchild);
    return x>y?x+1:y+1;
    
}

struct Node *InPredeccessor(struct Node *p)
{
    while(p && p->rchild!=NULL)
    p= p->rchild;
    return p;
}

struct Node *InSuccessor(struct Node *p)
{
    while(p && p->lchild!=NULL)
    p= p->lchild;
    return p;
}



struct Node *Delete (struct Node *p,int key)
{
    struct Node *q;
    if (p==NULL)
    return NULL;
    if(p->rchild==NULL && p->lchild==NULL)
    {
        if(p==root)
            {
                root=NULL;
            free(p);
            return NULL;
            }
        
    }
    if(key<p->data)
    p->lchild=Delete(p->lchild,key);
    else if(key>p->data)
    p->rchild=Delete(p->rchild,key);
    else
    {
        if(Height(p->lchild) > Height(p->rchild))
      {
          q=InPredeccessor(p->lchild);
       p->data=q->data;
       p->lchild=Delete(p->lchild,key);
      }
       else
      {
          q=InSuccessor(p->rchild);
       p->data=q->data;
       p->rchild=Delete(p->rchild,key);
      
      }
    }
    return p;
}










int main()
{
    struct Node *temp;
    root =Rinsert(root,10);
    Rinsert(root,20);
    insert(14);
    insert(8);
    Delete(root, 20);
    
    

    printf("Inorder Traversal: ");
    inorder(root);

    temp = Search(20);
    if (temp != NULL)
        printf("\nElement %d is found", temp->data);
    else
        printf("\nElement not found");

    return 0;
}
